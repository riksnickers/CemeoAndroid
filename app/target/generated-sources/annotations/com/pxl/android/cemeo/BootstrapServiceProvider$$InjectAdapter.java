// Code generated by dagger-compiler.  Do not edit.
package com.pxl.android.cemeo;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<BootstrapServiceProvider>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code BootstrapServiceProvider} and its
 * dependencies.
 * 
 * Being a {@code Provider<BootstrapServiceProvider>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<BootstrapServiceProvider>} and handling injection
 * of annotated fields.
 */
public final class BootstrapServiceProvider$$InjectAdapter extends Binding<BootstrapServiceProvider>
    implements Provider<BootstrapServiceProvider>, MembersInjector<BootstrapServiceProvider> {
  private Binding<com.pxl.android.cemeo.authenticator.ApiKeyProvider> keyProvider;
  private Binding<com.pxl.android.cemeo.core.UserAgentProvider> userAgentProvider;

  public BootstrapServiceProvider$$InjectAdapter() {
    super("com.pxl.android.cemeo.BootstrapServiceProvider", "members/com.pxl.android.cemeo.BootstrapServiceProvider", NOT_SINGLETON, BootstrapServiceProvider.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    keyProvider = (Binding<com.pxl.android.cemeo.authenticator.ApiKeyProvider>) linker.requestBinding("com.pxl.android.cemeo.authenticator.ApiKeyProvider", BootstrapServiceProvider.class);
    userAgentProvider = (Binding<com.pxl.android.cemeo.core.UserAgentProvider>) linker.requestBinding("com.pxl.android.cemeo.core.UserAgentProvider", BootstrapServiceProvider.class);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(keyProvider);
    injectMembersBindings.add(userAgentProvider);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<BootstrapServiceProvider>}.
   */
  @Override
  public BootstrapServiceProvider get() {
    BootstrapServiceProvider result = new BootstrapServiceProvider();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<BootstrapServiceProvider>}.
   */
  @Override
  public void injectMembers(BootstrapServiceProvider object) {
    object.keyProvider = keyProvider.get();
    object.userAgentProvider = userAgentProvider.get();
  }
}
