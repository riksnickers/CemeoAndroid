// Code generated by dagger-compiler.  Do not edit.
package com.pxl.android.cemeo.notifications;


import com.pxl.android.cemeo.GCMIntentService;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<GCMIntentService>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code GCMIntentService} and its
 * dependencies.
 * 
 * Being a {@code Provider<GCMIntentService>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<GCMIntentService>} and handling injection
 * of annotated fields.
 */
public final class GCMIntentService$$InjectAdapter extends Binding<GCMIntentService>
    implements Provider<GCMIntentService>, MembersInjector<GCMIntentService> {
  private Binding<android.content.Context> context;
  private Binding<android.accounts.AccountManager> accountManager;
  private Binding<net.jarlehansen.android.gcm.client.GCMUtilsBaseIntentService> supertype;

  public GCMIntentService$$InjectAdapter() {
    super("com.pxl.android.cemeo.GCMIntentService", "members/com.pxl.android.cemeo.GCMIntentService", NOT_SINGLETON, GCMIntentService.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", GCMIntentService.class);
    accountManager = (Binding<android.accounts.AccountManager>) linker.requestBinding("android.accounts.AccountManager", GCMIntentService.class);
    supertype = (Binding<net.jarlehansen.android.gcm.client.GCMUtilsBaseIntentService>) linker.requestBinding("members/net.jarlehansen.android.gcm.client.GCMUtilsBaseIntentService", GCMIntentService.class, false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(context);
    getBindings.add(accountManager);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<GCMIntentService>}.
   */
  @Override
  public GCMIntentService get() {
    GCMIntentService result = new GCMIntentService(context.get(), accountManager.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<GCMIntentService>}.
   */
  @Override
  public void injectMembers(GCMIntentService object) {
    supertype.injectMembers(object);
  }
}
